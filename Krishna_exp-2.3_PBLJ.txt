import java.util.*;
import java.util.stream.*;
import java.util.function.*;
import java.util.Comparator;

class Employee {
    String name;
    int age;
    double salary;

    Employee(String name, int age, double salary) {
        this.name = name;
        this.age = age;
        this.salary = salary;
    }

    public double getSalary() {
        return salary;
    }

    public int getAge() {
        return age;
    }

    public String getName() {
        return name;
    }

    public String toString() {
        return name + " | Age: " + age + " | Salary: " + salary;
    }
}

class Student {
    String name;
    double marks;

    Student(String name, double marks) {
        this.name = name;
        this.marks = marks;
    }

    public String toString() {
        return name + " | Marks: " + marks;
    }
}

class Product {
    String name;
    double price;
    String category;

    Product(String name, double price, String category) {
        this.name = name;
        this.price = price;
        this.category = category;
    }

    public String toString() {
        return name + " | Price: " + price + " | Category: " + category;
    }
}

public class LambdaStreamDemo {
    public static void main(String[] args) {
        // Part A: Sorting Employees
        List<Employee> employees = Arrays.asList(
            new Employee("Alice", 30, 70000),
            new Employee("Bob", 25, 50000),
            new Employee("Charlie", 35, 90000)
        );

        System.out.println("ðŸ”¹ Sorted by Name:");
        employees.stream()
                 .sorted(Comparator.comparing(Employee::getName))
                 .forEach(System.out::println);

        System.out.println("\nðŸ”¹ Sorted by Age:");
        employees.stream()
                 .sorted(Comparator.comparingInt(Employee::getAge))
                 .forEach(System.out::println);

        System.out.println("\nðŸ”¹ Sorted by Salary (Descending):");
        employees.stream()
                 .sorted(Comparator.comparingDouble(Employee::getSalary).reversed())
                 .forEach(System.out::println);

        // Part B: Filtering and Sorting Students
        List<Student> students = Arrays.asList(
            new Student("Krishna", 82),
            new Student("Kumar", 68),
            new Student("Hello", 91),
            new Student("Hi", 74)
        );

        System.out.println("\nðŸ”¹ Students with Marks > 75, Sorted by Marks:");
        students.stream()
                .filter(s -> s.marks > 75)
                .sorted(Comparator.comparingDouble(s -> s.marks))
                .map(s -> s.name)
                .forEach(System.out::println);

        // Part C: Stream Operations on Products
        List<Product> products = Arrays.asList(
            new Product("Laptop", 1200, "Electronics"),
            new Product("Phone", 800, "Electronics"),
            new Product("Shirt", 40, "Clothing"),
            new Product("Jeans", 60, "Clothing"),
            new Product("Blender", 100, "Home Appliances")
        );

        System.out.println("\nðŸ”¹ Grouped by Category:");
        Map<String, List<Product>> grouped = products.stream()
            .collect(Collectors.groupingBy(p -> p.category));
        grouped.forEach((category, items) -> {
            System.out.println(category + ": " + items);
        });

        System.out.println("\nðŸ”¹ Most Expensive Product in Each Category:");
        Map<String, Optional<Product>> maxByCategory = products.stream()
            .collect(Collectors.groupingBy(
                p -> p.category,
                Collectors.maxBy(Comparator.comparingDouble(p -> p.price))
            ));
        maxByCategory.forEach((category, product) -> {
            System.out.println(category + ": " + product.orElse(null));
        });

        System.out.println("\nðŸ”¹ Average Price of All Products:");
        double avgPrice = products.stream()
            .collect(Collectors.averagingDouble(p -> p.price));
        System.out.println("Average Price: " + avgPrice);
    }
}